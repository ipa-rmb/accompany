"""autogenerated by genpy from accompany_uva_msg/TrackedHuman.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import genpy
import std_msgs.msg

class TrackedHuman(genpy.Message):
  _md5sum = "831337243a4eece3e6abc55b17ef99e1"
  _type = "accompany_uva_msg/TrackedHuman"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/PointStamped location
geometry_msgs/Vector3Stamped speed
int32 id
string identity
time firstSeen
time lastSeen
int32 specialFlag

================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3Stamped
# This represents a Vector3 with reference coordinate frame and timestamp
Header header
Vector3 vector

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['location','speed','id','identity','firstSeen','lastSeen','specialFlag']
  _slot_types = ['geometry_msgs/PointStamped','geometry_msgs/Vector3Stamped','int32','string','time','time','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       location,speed,id,identity,firstSeen,lastSeen,specialFlag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrackedHuman, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.location is None:
        self.location = geometry_msgs.msg.PointStamped()
      if self.speed is None:
        self.speed = geometry_msgs.msg.Vector3Stamped()
      if self.id is None:
        self.id = 0
      if self.identity is None:
        self.identity = ''
      if self.firstSeen is None:
        self.firstSeen = genpy.Time()
      if self.lastSeen is None:
        self.lastSeen = genpy.Time()
      if self.specialFlag is None:
        self.specialFlag = 0
    else:
      self.location = geometry_msgs.msg.PointStamped()
      self.speed = geometry_msgs.msg.Vector3Stamped()
      self.id = 0
      self.identity = ''
      self.firstSeen = genpy.Time()
      self.lastSeen = genpy.Time()
      self.specialFlag = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.location.header.seq, _x.location.header.stamp.secs, _x.location.header.stamp.nsecs))
      _x = self.location.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d3I.pack(_x.location.point.x, _x.location.point.y, _x.location.point.z, _x.speed.header.seq, _x.speed.header.stamp.secs, _x.speed.header.stamp.nsecs))
      _x = self.speed.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3di.pack(_x.speed.vector.x, _x.speed.vector.y, _x.speed.vector.z, _x.id))
      _x = self.identity
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4Ii.pack(_x.firstSeen.secs, _x.firstSeen.nsecs, _x.lastSeen.secs, _x.lastSeen.nsecs, _x.specialFlag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.location is None:
        self.location = geometry_msgs.msg.PointStamped()
      if self.speed is None:
        self.speed = geometry_msgs.msg.Vector3Stamped()
      if self.firstSeen is None:
        self.firstSeen = genpy.Time()
      if self.lastSeen is None:
        self.lastSeen = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.location.header.seq, _x.location.header.stamp.secs, _x.location.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.location.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.location.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.location.point.x, _x.location.point.y, _x.location.point.z, _x.speed.header.seq, _x.speed.header.stamp.secs, _x.speed.header.stamp.nsecs,) = _struct_3d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.speed.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.speed.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.speed.vector.x, _x.speed.vector.y, _x.speed.vector.z, _x.id,) = _struct_3di.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.identity = str[start:end].decode('utf-8')
      else:
        self.identity = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.firstSeen.secs, _x.firstSeen.nsecs, _x.lastSeen.secs, _x.lastSeen.nsecs, _x.specialFlag,) = _struct_4Ii.unpack(str[start:end])
      self.firstSeen.canon()
      self.lastSeen.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.location.header.seq, _x.location.header.stamp.secs, _x.location.header.stamp.nsecs))
      _x = self.location.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d3I.pack(_x.location.point.x, _x.location.point.y, _x.location.point.z, _x.speed.header.seq, _x.speed.header.stamp.secs, _x.speed.header.stamp.nsecs))
      _x = self.speed.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3di.pack(_x.speed.vector.x, _x.speed.vector.y, _x.speed.vector.z, _x.id))
      _x = self.identity
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4Ii.pack(_x.firstSeen.secs, _x.firstSeen.nsecs, _x.lastSeen.secs, _x.lastSeen.nsecs, _x.specialFlag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.location is None:
        self.location = geometry_msgs.msg.PointStamped()
      if self.speed is None:
        self.speed = geometry_msgs.msg.Vector3Stamped()
      if self.firstSeen is None:
        self.firstSeen = genpy.Time()
      if self.lastSeen is None:
        self.lastSeen = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.location.header.seq, _x.location.header.stamp.secs, _x.location.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.location.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.location.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.location.point.x, _x.location.point.y, _x.location.point.z, _x.speed.header.seq, _x.speed.header.stamp.secs, _x.speed.header.stamp.nsecs,) = _struct_3d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.speed.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.speed.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.speed.vector.x, _x.speed.vector.y, _x.speed.vector.z, _x.id,) = _struct_3di.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.identity = str[start:end].decode('utf-8')
      else:
        self.identity = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.firstSeen.secs, _x.firstSeen.nsecs, _x.lastSeen.secs, _x.lastSeen.nsecs, _x.specialFlag,) = _struct_4Ii.unpack(str[start:end])
      self.firstSeen.canon()
      self.lastSeen.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3d3I = struct.Struct("<3d3I")
_struct_3I = struct.Struct("<3I")
_struct_3di = struct.Struct("<3di")
_struct_4Ii = struct.Struct("<4Ii")
