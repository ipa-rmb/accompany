/* Auto-generated by genmsg_cpp for file /home/accompany/git/accompany/accompany_uva_msg/msg/Appearance.msg */
#ifndef ACCOMPANY_UVA_MSG_MESSAGE_APPEARANCE_H
#define ACCOMPANY_UVA_MSG_MESSAGE_APPEARANCE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace accompany_uva_msg
{
template <class ContainerAllocator>
struct Appearance_ {
  typedef Appearance_<ContainerAllocator> Type;

  Appearance_()
  : sumTemplatePixelSize(0)
  , sumPixelWeights(0.0)
  , histogram()
  {
  }

  Appearance_(const ContainerAllocator& _alloc)
  : sumTemplatePixelSize(0)
  , sumPixelWeights(0.0)
  , histogram(_alloc)
  {
  }

  typedef int32_t _sumTemplatePixelSize_type;
  int32_t sumTemplatePixelSize;

  typedef double _sumPixelWeights_type;
  double sumPixelWeights;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _histogram_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  histogram;


  typedef boost::shared_ptr< ::accompany_uva_msg::Appearance_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::accompany_uva_msg::Appearance_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Appearance
typedef  ::accompany_uva_msg::Appearance_<std::allocator<void> > Appearance;

typedef boost::shared_ptr< ::accompany_uva_msg::Appearance> AppearancePtr;
typedef boost::shared_ptr< ::accompany_uva_msg::Appearance const> AppearanceConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::accompany_uva_msg::Appearance_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::accompany_uva_msg::Appearance_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace accompany_uva_msg

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::accompany_uva_msg::Appearance_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::accompany_uva_msg::Appearance_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::accompany_uva_msg::Appearance_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bd36eb66e6a8febafac79f820b94b7e8";
  }

  static const char* value(const  ::accompany_uva_msg::Appearance_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbd36eb66e6a8febaULL;
  static const uint64_t static_value2 = 0xfac79f820b94b7e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::accompany_uva_msg::Appearance_<ContainerAllocator> > {
  static const char* value() 
  {
    return "accompany_uva_msg/Appearance";
  }

  static const char* value(const  ::accompany_uva_msg::Appearance_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::accompany_uva_msg::Appearance_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32      sumTemplatePixelSize\n\
float64    sumPixelWeights\n\
float64[]  histogram\n\
\n\
";
  }

  static const char* value(const  ::accompany_uva_msg::Appearance_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::accompany_uva_msg::Appearance_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.sumTemplatePixelSize);
    stream.next(m.sumPixelWeights);
    stream.next(m.histogram);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Appearance_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::accompany_uva_msg::Appearance_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::accompany_uva_msg::Appearance_<ContainerAllocator> & v) 
  {
    s << indent << "sumTemplatePixelSize: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sumTemplatePixelSize);
    s << indent << "sumPixelWeights: ";
    Printer<double>::stream(s, indent + "  ", v.sumPixelWeights);
    s << indent << "histogram[]" << std::endl;
    for (size_t i = 0; i < v.histogram.size(); ++i)
    {
      s << indent << "  histogram[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.histogram[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ACCOMPANY_UVA_MSG_MESSAGE_APPEARANCE_H

