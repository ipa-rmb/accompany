/* Auto-generated by genmsg_cpp for file /home/accompany/git/accompany/accompany_uva_msg/msg/TrackedHuman.msg */
#ifndef ACCOMPANY_UVA_MSG_MESSAGE_TRACKEDHUMAN_H
#define ACCOMPANY_UVA_MSG_MESSAGE_TRACKEDHUMAN_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/PointStamped.h"
#include "geometry_msgs/Vector3Stamped.h"

namespace accompany_uva_msg
{
template <class ContainerAllocator>
struct TrackedHuman_ {
  typedef TrackedHuman_<ContainerAllocator> Type;

  TrackedHuman_()
  : location()
  , speed()
  , id(0)
  , identity()
  , firstSeen()
  , lastSeen()
  , specialFlag(0)
  {
  }

  TrackedHuman_(const ContainerAllocator& _alloc)
  : location(_alloc)
  , speed(_alloc)
  , id(0)
  , identity(_alloc)
  , firstSeen()
  , lastSeen()
  , specialFlag(0)
  {
  }

  typedef  ::geometry_msgs::PointStamped_<ContainerAllocator>  _location_type;
   ::geometry_msgs::PointStamped_<ContainerAllocator>  location;

  typedef  ::geometry_msgs::Vector3Stamped_<ContainerAllocator>  _speed_type;
   ::geometry_msgs::Vector3Stamped_<ContainerAllocator>  speed;

  typedef int32_t _id_type;
  int32_t id;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _identity_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  identity;

  typedef ros::Time _firstSeen_type;
  ros::Time firstSeen;

  typedef ros::Time _lastSeen_type;
  ros::Time lastSeen;

  typedef int32_t _specialFlag_type;
  int32_t specialFlag;


  typedef boost::shared_ptr< ::accompany_uva_msg::TrackedHuman_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::accompany_uva_msg::TrackedHuman_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TrackedHuman
typedef  ::accompany_uva_msg::TrackedHuman_<std::allocator<void> > TrackedHuman;

typedef boost::shared_ptr< ::accompany_uva_msg::TrackedHuman> TrackedHumanPtr;
typedef boost::shared_ptr< ::accompany_uva_msg::TrackedHuman const> TrackedHumanConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::accompany_uva_msg::TrackedHuman_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::accompany_uva_msg::TrackedHuman_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace accompany_uva_msg

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::accompany_uva_msg::TrackedHuman_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::accompany_uva_msg::TrackedHuman_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::accompany_uva_msg::TrackedHuman_<ContainerAllocator> > {
  static const char* value() 
  {
    return "831337243a4eece3e6abc55b17ef99e1";
  }

  static const char* value(const  ::accompany_uva_msg::TrackedHuman_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x831337243a4eece3ULL;
  static const uint64_t static_value2 = 0xe6abc55b17ef99e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::accompany_uva_msg::TrackedHuman_<ContainerAllocator> > {
  static const char* value() 
  {
    return "accompany_uva_msg/TrackedHuman";
  }

  static const char* value(const  ::accompany_uva_msg::TrackedHuman_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::accompany_uva_msg::TrackedHuman_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/PointStamped location\n\
geometry_msgs/Vector3Stamped speed\n\
int32 id\n\
string identity\n\
time firstSeen\n\
time lastSeen\n\
int32 specialFlag\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3Stamped\n\
# This represents a Vector3 with reference coordinate frame and timestamp\n\
Header header\n\
Vector3 vector\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::accompany_uva_msg::TrackedHuman_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::accompany_uva_msg::TrackedHuman_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.location);
    stream.next(m.speed);
    stream.next(m.id);
    stream.next(m.identity);
    stream.next(m.firstSeen);
    stream.next(m.lastSeen);
    stream.next(m.specialFlag);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TrackedHuman_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::accompany_uva_msg::TrackedHuman_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::accompany_uva_msg::TrackedHuman_<ContainerAllocator> & v) 
  {
    s << indent << "location: ";
s << std::endl;
    Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.location);
    s << indent << "speed: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3Stamped_<ContainerAllocator> >::stream(s, indent + "  ", v.speed);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "identity: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.identity);
    s << indent << "firstSeen: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.firstSeen);
    s << indent << "lastSeen: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.lastSeen);
    s << indent << "specialFlag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.specialFlag);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ACCOMPANY_UVA_MSG_MESSAGE_TRACKEDHUMAN_H

